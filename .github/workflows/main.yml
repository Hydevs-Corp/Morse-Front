name: Build and Push Docker Image

on:
    push:
        branches: [staging]
    pull_request:
        branches: [staging]

jobs:
    build-and-push:
        runs-on: self-hosted

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Extract Docker metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: angysquirrel/morse-front
                  tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=raw,value=latest,enable={{is_default_branch}}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: ./
                  file: ./Dockerfile
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
                  build-args: |
                      BUILDKIT_INLINE_CACHE=1

            - name: Clean up Docker images on self-hosted runner
              if: always()
              run: |
                  echo "Cleaning up Docker images..."
                  docker system prune -af || true 
                  docker volume prune -f || true

    pull-image-and-deploy:
        runs-on: self-hosted
        needs: build-and-push

        steps:
            - name: Deploy to remote server via SSH
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.VPS_HOST }}
                  username: ${{ secrets.VPS_USERNAME }}
                  key: ${{ secrets.VPS_PRIVATE_KEY }}
                  script: |
                      IMAGE_TAG="angysquirrel/morse-front:latest" 

                      echo "Pulling Docker image: $IMAGE_TAG"
                      docker pull $IMAGE_TAG

                      echo "Stopping and removing existing container 'morse-front' (if any)"
                      docker stop morse-front || true
                      docker rm morse-front || true

                      echo "Creating .env file on remote server"
                      mkdir -p /home/ubuntu/front/morse || exit 1
                      echo "${{ secrets.DOTENV_CONTENT }}" > /home/ubuntu/front/morse/.env || exit 1
                      if [ ! -f /home/ubuntu/front/morse/.env ]; then
                          echo "Error: .env file was not created properly."
                          exit 1
                      fi
                      docker run -d \
                          --name morse-front \
                          -p 85:80 \
                          --restart unless-stopped \
                          --env-file /home/ubuntu/front/morse/.env \
                          $IMAGE_TAG || exit 1

                      echo "Waiting for container to stabilize..."
                      sleep 10 

                      echo "Checking container logs for initial startup"
                      docker logs morse-front | tail -n 20

                      echo "Verifying container status..."
                      if docker ps -q -f name=morse-front; then
                          echo "Container 'morse-front' is running successfully."
                      else
                          echo "Container 'morse-front' failed to start."
                          docker logs morse-front 
                          exit 1
                      fi

            - name: Clean up Docker artifacts on remote server
              if: always()
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.VPS_HOST }}
                  username: ${{ secrets.VPS_USERNAME }}
                  key: ${{ secrets.VPS_PRIVATE_KEY }}
                  script: |
                      echo "Cleaning up old Docker images on remote server..."
                      docker image prune -af --filter "until=24h" || true
                      docker system prune -f || true
